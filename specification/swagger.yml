swagger: "2.0"
info:
  description: "Events Planner is a RESTful service designed to create and manage events"
  version: "1.0.0"
  title: "Events Planner"
host: "127.0.0.1:3000"
tags:
- name: "User Actions"
  description: "User related actions"
- name: "Users"
  description: "User related routes"
- name: "User Events"
  description: "User events related routes"
- name: "Publishers"
  description: "Publisher related routes"
- name: "Events"
  description: "Event related routes"
schemes:
- "https"
- "http"
paths:
  /register:
    post:
      tags:
      - "User Actions"
      summary: "Add new user"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User that needs to be added to service"
        required: true
        schema:
          $ref: "#/definitions/UserRegister"
      responses:
        "201":
          description: "Response with newly added user"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Bad Request"
  /login:
    post:
      tags:
      - "User Actions"
      summary: "Login to the platform"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User that needs to be added to service"
        required: true
        schema:
          $ref: "#/definitions/UserLogin"
      responses:
        "200":
          description: "Response with created user token"
          schema:
            $ref: "#/definitions/UserToken"
        "400":
          description: "Bad Request"
  /users:
    get:
      tags:
      - "Users"
      summary: "Get all users"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Response with list of all users available"
          schema:
            $ref: "#/definitions/UserDetailsList"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
  /users/{userId}:
    get:
      tags:
      - "Users"
      summary: "Get user by ID"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User ID"
        required: true
        type: "string"
      responses:
        "200":
          description: "List of users registered in the service"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "404":
          description: "User not found"
    put:
      tags:
      - "Users"
      summary: "Change user details by ID"
      parameters:
      - name: "userId"
        in: "path"
        description: "User ID"
        required: true
        type: "string"
      responses:
        "201":
          description: "User properly updated"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "404":
          description: "User not found"
    delete:
      tags:
      - "Users"
      summary: "Delete user by ID"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User ID"
        required: true
        type: "string"
      responses:
        "204":
          description: "User properly deleted"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "404":
          description: "User not found"
  /publishers:
    get:
      tags:
      - "Publishers"
      summary: "Get all publishers"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Response with list of all publishers available"
          schema:
            $ref: "#/definitions/PublisherList"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
    post:
      tags:
      - "Publishers"
      summary: "Add new publisher"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Consumer object that needs to be added to service"
        required: true
        schema:
          $ref: "#/definitions/Publisher"
      responses:
        "200":
          description: "Response with list of all consumers available"
          schema:
            $ref: "#/definitions/Publisher"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
  /publishers/{publisherId}:
    get:
      tags:
      - "Publishers"
      summary: "Get publisher by ID"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "publisherId"
        in: "path"
        description: "Publisher ID"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Publisher"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "404":
          description: "Consumer not found"
    put:
      tags:
      - "Publishers"
      summary: "Change user details by ID"
      parameters:
      - name: "publisherId"
        in: "path"
        description: "Publisher ID"
        required: true
        type: "string"
      responses:
        "201":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Publisher"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "404":
          description: "Consumer not found"
    delete:
      tags:
      - "Publishers"
      summary: "Delete publisher by ID"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "publisherId"
        in: "path"
        description: "Publisher ID"
        required: true
        type: "string"
      responses:
        "204":
          description: "successful operation"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "404":
          description: "Publisher not found"
  /publishers/{publisherId}/events:
    get:
      tags:
      - "Publishers"
      summary: "Get list of events created by a publisher"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "publisherId"
        in: "path"
        description: "Publisher ID"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "404":
          description: "Publisher not found"
  /events/{eventId}/attendees:
    get:
      tags:
      - "User Events"
      summary: "Get event attendees"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        description: "ID of the event"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "404":
          description: "Event not found"
    post:
      tags:
      - "User Events"
      summary: "Add user to the event"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        description: "ID of the event"
        required: true
        type: "string"
      responses:
        "201":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "404":
          description: "Event not found"
  /events/{eventId}/attendees/{userId}:
    delete:
      tags:
      - "User Events"
      summary: "Remove user from event"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        description: "Event ID"
        required: true
        type: "string"
      - name: "userId"
        in: "path"
        description: "User ID"
        required: true
        type: "string"
      responses:
        "204":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "404":
          description: "Event or user not found"
          
  /events:
    get:
      tags:
      - "Events"
      summary: "Get all events"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Response with list of all events available"
          schema:
            $ref: "#/definitions/UsersList"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
    post:
      tags:
      - "Events"
      summary: "Add new event"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Event object that needs to be added to service"
        required: true
        schema:
          $ref: "#/definitions/Event"
      responses:
        "201":
          description: "Response with list of all consumers available"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
  /events/{eventId}:
    get:
      tags:
      - "Events"
      summary: "Get event by ID"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        description: "Event ID"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "404":
          description: "Event not found"
    put:
      tags:
      - "Events"
      summary: "Change event details by ID"
      parameters:
      - name: "eventId"
        in: "path"
        description: "Event ID"
        required: true
        type: "string"
      responses:
        "201":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "404":
          description: "Event not found"
    delete:
      tags:
      - "Events"
      summary: "Delete event by ID"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        description: "Event ID"
        required: true
        type: "string"
      responses:
        "204":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "404":
          description: "Event not found"

definitions:
  UserRegister:
    type: "object"
    properties:
      email:
        type: "string"
      name:
        type: "string"
      surname:
        type: "string"
      password:
        type: "string"
  UserLogin:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
  UserToken:
    type: "object"
    properties:
      token:
        type: "string"
  UsersList:
    type: "array"
    items:
      type: "string"
  PublisherList:
    type: "array"
    items:
      type: "string"
  UserDetailsList:
    type: "array"
    items:
      $ref: "#/definitions/User"
  User:
    type: "object"
    properties:
      id:
        type: "number"
      name:
        type: "string"
      surname:
        type: "string"
      email:
        type: "string"
  Publisher:
    type: "object"
    properties:
      name:
        type: "string"
  Event:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      description: 
        type: "string"
      publisherId: 
        type: "number"
      startDate:
        type: "string"
        format: "date-time"
      endDate:
        type: "string"
        format: "date-time"